
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href= "/assets/css/student.css" rel="stylesheet" type="text/css" />
    <title>Essay Editor</title>
</head>
<body>
    <header>
        <%- include('./partials/header'); %>
    </header>

    <button id="authorize_button" onclick="handleAuthClick()">Authorize</button>
    <button id="signout_button" onclick="handleSignoutClick()">Sign Out</button>

    <pre id="content" style="white-space: pre-wrap;"></pre>

    <div class="back_centered">
        <div class="text_container">
            <form class="submission" method="post" action="/student">
                <div class="sidebar">
                    <input type="text" name="name" class="name" style="display: none;"></input>
                    <input type="text" name="prog" class="prog" style="display: none;"></input>
                    <div class="submit_button">
                        <a onclick="submitClicked()">Submit</a>
                    </div>
                    <div class="save_button">
                        <a onclick="saveEssay()">Save</a>
                    </div>
                </div>
                <div class="front">
                    <textarea name="content" class="scroll" type="text"><%= essay %></textarea>
                </div>
            </form>
        </div>
    </div>
    <script>
        function submitClicked() {
            let essay = document.querySelector('.scroll').value;
            let name = document.querySelector('.name').value;
            document.querySelector('.prog').value = 'n';
            if(essay.trim() == "" || name.trim() == "")
                return;
            document.querySelector('.submission').submit();
        }
        function saveEssay() {
            let name = document.querySelector('.name').value;
            document.querySelector('.prog').value = 'y';
            if(name.trim() == "")
                return;
            document.querySelector('.submission').submit();
        }
        window.onload = () => {
            let url = window.location.href;
            let name = url.split('name=')[1];
            name = name.replaceAll('%22', '');
            document.querySelector('.name').value = name;
        };
        const CLIENT_ID = 'oh hell nah';
        const API_KEY = 'did you just try looking at my api key?';
        const CLIENT_SECRET = 'stop looking';

        // Discovery doc URL for APIs used by the quickstart
        const DISCOVERY_DOC = [
            'https://docs.googleapis.com/$discovery/rest?version=v1',
            'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'
        ];

        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        const SCOPES = 'https://www.googleapis.com/auth/documents.readonly https://www.googleapis.com/auth/documents https://www.googleapis.com/auth/drive.file';

        let tokenClient;
        let gapiInited = false;
        let gisInited = false;

        document.getElementById('signout_button').style.visibility = 'hidden';
        document.getElementById('authorize_button').style.visibility = 'hidden';

        /**
         * Callback after api.js is loaded.
         */
        function gapiLoaded() {
            gapi.load('client', function() {
                initializeGapiClient();
            });
            console.log(gapi);
            maybeEnableButtons();
        }

        function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: '', // defined later
            });
            gisInited = true;
            maybeEnableButtons();
        }

        function maybeEnableButtons() {
            if (gapiInited && gisInited) {
                document.getElementById('authorize_button').style.visibility = 'visible';
            }
        }

        /**
         * Callback after the API client is loaded. Loads the
         * discovery doc to initialize the API.
         */
        async function initializeGapiClient() {
            try {
                console.log("Doing the gapi.client.init function");
                await gapi.client.init({
                    apiKey: API_KEY,
                    discoveryDocs: DISCOVERY_DOC,
                    //clientId: CLIENT_ID,
                    //scope: SCOPES,
                }).then(function () {
                    console.log("Initialized");
                });
                gapiInited = true;
                maybeEnableButtons();
            } catch (error) {
                console.error(error);
                alert("Error initializing gapi.client: " + error.message);
            }
        }

        /**
         *  Sign in the user upon button click.
         */
        async function handleAuthClick() {
            tokenClient.callback = async (resp) => {
                if (resp.error !== undefined) {
                    throw (resp);
                }
                document.getElementById('signout_button').style.visibility = 'visible';
                document.getElementById('authorize_button').innerText = 'Refresh';
                await printDocTitle();
                await createAndEmbedDoc();
            };

            if (gapi.client.getToken() === null) {
                // Prompt the user to select a Google Account and ask for consent to share their data
                // when establishing a new session.
                tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
                // Skip display of account chooser and consent dialog for an existing session.
                tokenClient.requestAccessToken({prompt: ''});
            }
        }

        /**
         *  Sign out the user upon button click.
         */
        function handleSignoutClick() {
            const token = gapi.client.getToken();
            if (token !== null) {
                google.accounts.oauth2.revoke(token.access_token);
                gapi.client.setToken('');
                document.getElementById('content').innerText = '';
                document.getElementById('authorize_button').innerText = 'Authorize';
                document.getElementById('signout_button').style.visibility = 'hidden';
            }
            document.querySelector('.docs_embed').remove();
            window.location.href = 'http://localhost:2020/';
        }

        /**
         * Prints the title of a sample doc:
         * https://docs.google.com/document/d/195j9eDD3ccgjQRttHhJPymLJUCOUjs-jmwTrekvdjFE/edit
         */
        async function printDocTitle() {
            try {
                const response = await gapi.client.docs.documents.get({
                    documentId: '195j9eDD3ccgjQRttHhJPymLJUCOUjs-jmwTrekvdjFE',
                });
                const doc = response.result;
                const output = `Document ${doc.title} successfully found.\n`;
                console.log(output);
            } catch (err) {
                console.log(err.message);
            return;
            }
        }

        async function createAndEmbedDoc() {
            const fileMetadata = {
                'name': 'Essay Doc',
                'mimeType': 'application/vnd.google-apps.document'
            };
            const response = await gapi.client.drive.files.create({
                resource: fileMetadata,
                fields: 'id'
            });
            const documentId = response.result.id;

            const embedUrl = `https://docs.google.com/document/d/${documentId}/edit?usp=sharing`;
            const iframe = document.createElement('iframe');
            iframe.src = embedUrl;
            iframe.width = '640';
            iframe.height = '480';
            iframe.className = 'docs_embed'
            document.body.appendChild(iframe);
        }
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
</body>
</html>